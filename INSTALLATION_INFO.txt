╔═══════════════════════════════════════════════════════╗
║    GIS Management v2.0 - Installation Info           ║
║    Session-basierte Authentifizierung (sicher!)      ║
╚═══════════════════════════════════════════════════════╝

Installation abgeschlossen: Di 21. Okt 01:23:48 CEST 2025

ARCHITEKTUR v2.0:
──────────────────
✓ Backend-basierte KeyCloak-Authentifizierung
✓ Client Secret sicher in DB (verschlüsselt)
✓ Session-basierte Auth mit HttpOnly Cookies
✓ Kein Token-Handling im Frontend
✓ Authorization Code Flow mit PKCE

SYSTEM:
───────
Python: Python 3.13.5
PostgreSQL: psql (PostgreSQL) 17.6 (Debian 17.6-0+deb13u1)
Nginx: nginx version: nginx/1.26.3
Node.js: v20.19.2

NÄCHSTE SCHRITTE:
─────────────────
1. KeyCloak Client Secret in DB speichern:
   bash /opt/gis-management/scripts/setup-keycloak.sh

2. KeyCloak Client konfigurieren (auth.eizes.com/admin):
   - Client ID: eizes-gis
   - Client authentication: ON
   - Valid Redirect URIs: https://gis.eizes.com/api/auth/callback
   - Web Origins: https://gis.eizes.com
   - Standard Flow Enabled: ON

3. Backend neu starten:
   systemctl restart gis-fastapi

ZUGANGSDATEN:
─────────────
Django Admin:
  URL: https://gis.eizes.com/admin/
  User: admin
  Pass: admin
  ⚠️ SOFORT ÄNDERN!

Datenbank:
  Name: gis
  User: gis
  Pass: gis.753

BEFEHLE:
────────
Status prüfen:
  systemctl status gis-django gis-fastapi nginx

Logs anzeigen:
  journalctl -u gis-fastapi -f
  tail -f /var/log/gis-management/django.log

Backup erstellen:
  bash /opt/gis-management/scripts/backup.sh

KeyCloak Setup:
  bash /opt/gis-management/scripts/setup-keycloak.sh
